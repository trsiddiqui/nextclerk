import { Knex } from 'knex'

export async function up(knex: Knex): Promise<void> {
  await knex.schema.createTable('users', (table) => {
    table.bigIncrements('id').unsigned().primary()
    table.string('uuid').notNullable()
    table.string('email', 45).notNullable()
    table.string('firstName', 100).notNullable()
    table.string('lastName', 100).notNullable()
    table.string('password', 255).nullable()
  })
  await knex.schema.createTable('entities', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('name').notNullable()
    table.boolean('isPrimary').defaultTo(false).notNullable()
    table.string('folderId')
    table.timestamp('startOfFinancialYear')
    table.timestamp('endOfFinancialYear')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('labels', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('categories', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('name').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('files', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.text('name').notNullable()
    table.text('mimeType').nullable()
    table.text('location').notNullable()
    table.text('downloadLink').nullable()
    table.text('remoteReferenceUuid').nullable()
    table.bigint('size').nullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('supporting_packages', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.bigInteger('categoryID').notNullable().references('id').inTable('public.categories')
    table.bigInteger('labelID').notNullable().references('id').inTable('public.labels')
    table.string('title').nullable()
    table.string('number').nullable()
    table.boolean('isConfidential').defaultTo(false).notNullable()
    table.string('journalNumber').nullable()
    table.timestamp('date').notNullable().defaultTo(knex.fn.now())
    table.boolean('isDraft').notNullable().defaultTo(true)
    table.string('status').nullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('tasks', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.bigInteger('categoryID').notNullable().references('id').inTable('public.categories')
    table.bigInteger('labelID').notNullable().references('id').inTable('public.labels')
    table.bigInteger('supportingPackageID').references('id').inTable('public.supporting_packages')
    table.string('parentUuid')
    table.string('title').nullable()
    table.string('description').nullable()
    table.boolean('isConfidential').defaultTo(false).notNullable()
    table.timestamp('date').notNullable().defaultTo(knex.fn.now())
    table.timestamp('dueDate').notNullable().defaultTo(knex.fn.now())
    table.boolean('isRecurring').defaultTo(false).notNullable()
    table.bigInteger('assigneeID').references('id').inTable('public.users')
    table.bigInteger('assignerID').notNullable().references('id').inTable('public.users')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.alterTable('users', (table) => {
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
  })

  await knex.schema.createTable('supporting_packages_attachments', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.bigInteger('fileID').notNullable().references('id').inTable('public.files')
    table.boolean('isMaster').defaultTo(false).notNullable()
    table.string('name')
    table.string('mimeType')
    table.integer('size')
    table.jsonb('highLights').nullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })

  await knex.schema.createTable('supporting_packages_communications', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.string('range')
    table.string('sheet')
    table.boolean('isCellLinkValid')
    table.text('text').notNullable()
    table
      .bigInteger('replyToCommunicationId')
      .references('id')
      .inTable('public.supporting_packages_communications')
    table.boolean('isChangeRequest').defaultTo(false)
    table.string('status', 15).nullable,
      table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('communications_attachments', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('communicationID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages_communications')
    table.bigInteger('fileID').notNullable().references('id').inTable('public.files')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })

  await knex.schema.createTable('communications_users', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('communicationID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages_communications')
    table.bigInteger('userID').notNullable().references('id').inTable('public.users')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })

  await knex.schema.createTable('supporting_packages_users', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.bigInteger('userID').notNullable().references('id').inTable('public.users')
    table.string('type').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deletedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
    table.unique(['supportingPackageID', 'userID', 'type'])
  })

  await knex.schema.createTable('integrations', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('departments', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.bigInteger('integrationID').notNullable().references('id').inTable('public.integrations')
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.string('uuid').notNullable()
    table.string('internalID').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['entityID', 'integrationID', 'uuid'])
  })

  await knex.schema.createTable('locations', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.bigInteger('integrationID').notNullable().references('id').inTable('public.integrations')
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.string('uuid').notNullable()
    table.string('internalID').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['entityID', 'integrationID', 'uuid'])
  })

  await knex.schema.createTable('customers', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.bigInteger('integrationID').notNullable().references('id').inTable('public.integrations')
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.string('uuid').notNullable()
    table.string('internalID').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['entityID', 'integrationID', 'internalID'])
  })

  await knex.schema.createTable('accounts', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.bigInteger('integrationID').notNullable().references('id').inTable('public.integrations')
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.bigInteger('parentID').nullable().references('id').inTable('public.accounts')
    table.string('uuid').notNullable()
    table.string('internalID').notNullable()
    table.string('accountNumber').notNullable()
    table.string('label').notNullable()
    table.float('initialBalance',2).defaultTo(0)
    table.float('latestBalance',2).defaultTo(0)
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['accountNumber', 'entityID', 'integrationID'])
  })

  await knex.schema.alterTable('labels', (table) => {
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
  })

  await knex.schema.createTable('customer_auth_details', (table) => {
    table.bigIncrements('id').unsigned().primary()
    table.string('entityUuid').references('uuid').inTable('entities')
    table.text('clientID').notNullable()
    table.text('clientSecret').notNullable()
    table.text('applicationID').notNullable()
    table.text('refreshToken').nullable()
    table.timestamp('refreshTokenExpiry').nullable()
    table.unique(['applicationID'])
  })

  await knex.schema.createTable('journal_entry_details', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.uuid('uuid').notNullable()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.bigInteger('accountID').notNullable().references('id').inTable('public.accounts')
    table.bigInteger('departmentID').references('id').inTable('public.departments')
    table.bigInteger('locationID').references('id').inTable('public.locations')
    table.bigInteger('customerID').references('id').inTable('public.customers')
    table.string('referenceCode')
    table.string('cellLink')
    table.text('memo')
    table.float('debitAmount')
    table.float('creditAmount')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deletedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })
}

export async function down(knex: Knex): Promise<void> {
  await knex.schema.dropTable('users')
  await knex.schema.dropTable('entities')
  await knex.schema.dropTable('labels')
  await knex.schema.dropTable('categories')
  await knex.schema.dropTable('files')
  await knex.schema.dropTable('supporting_packages')
  await knex.schema.dropTable('supporting_packages_participants')
  await knex.schema.dropTable('supporting_packages_attachments')
  await knex.schema.dropTable('communications_users')
  await knex.schema.dropTable('supporting_packages_communications')
  await knex.schema.dropTable('integrations')
  await knex.schema.dropTable('departments')
  await knex.schema.dropTable('accounts')
  await knex.schema.dropTable('customers')
  await knex.schema.dropTable('locations')
}
