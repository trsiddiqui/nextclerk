import { Knex } from 'knex'

export async function up(knex: Knex): Promise<void> {
  await knex.schema.createTable('entities', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('name').notNullable()
    table.boolean('isPrimary').defaultTo(false).notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('labels', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('label').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('categories', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.string('name').notNullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })
  await knex.schema.createTable('files', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.text('name').notNullable()
    table.text('location').notNullable()
    table.text('remoteReferenceUuid').nullable()
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('supporting_packages', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table.bigInteger('entityID').notNullable().references('id').inTable('public.entities')
    table.bigInteger('categoryID').notNullable().references('id').inTable('public.categories')
    table.bigInteger('labelID').notNullable().references('id').inTable('public.labels')
    table.string('title').nullable()
    table.string('number').nullable()
    table.boolean('isConfidential').defaultTo(false).notNullable()
    table.string('journalNumber').nullable()
    table.timestamp('date').notNullable()
    table.boolean('isDraft').notNullable()
    table.bigInteger('approverID').notNullable().references('id').inTable('public.users')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.unique(['uuid'])
  })
  await knex.schema.createTable('supporting_packages_attachments', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.bigInteger('fileID').notNullable().references('id').inTable('public.files')
    table.boolean('isMaster').defaultTo(false).notNullable()
    table.string('name')
    table.string('mimeType')
    table.integer('size')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })

  await knex.schema.createTable('supporting_packages_communications', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table.string('uuid').notNullable()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.string('cellLink')
    table.boolean('isCellLinkValid')
    table.text('text').notNullable()
    table
      .bigInteger('attachmentId')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages_attachments')
    table
      .bigInteger('replyToCommunicationId')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages_communications')
    table.boolean('isChangeRequest').defaultTo(false)
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('archivedAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('archivedBy')
    table.unique(['uuid'])
  })

  await knex.schema.createTable('communications_users', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('communicationID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages_communications')
    table.bigInteger('userID').notNullable().references('id').inTable('public.users')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })

  await knex.schema.createTable('supporting_packages_participants', (table) => {
    table.bigIncrements('id').notNullable().primary()
    table
      .bigInteger('supportingPackageID')
      .notNullable()
      .references('id')
      .inTable('public.supporting_packages')
    table.bigInteger('userID').notNullable().references('id').inTable('public.users')
    table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('updatedAt').notNullable().defaultTo(knex.fn.now())
    table.timestamp('deleteAt')
    table.string('createdBy').notNullable()
    table.string('updatedBy').notNullable()
    table.string('deletedBy')
  })
}

export async function down(knex: Knex): Promise<void> {
  await knex.schema.dropTable('entities')
  await knex.schema.dropTable('labels')
  await knex.schema.dropTable('categories')
  await knex.schema.dropTable('files')
  await knex.schema.dropTable('supporting_packages')
  await knex.schema.dropTable('supporting_packages_participants')
  await knex.schema.dropTable('supporting_packages_attachments')
  await knex.schema.dropTable('communications_users')
  await knex.schema.dropTable('supporting_packages_communications')
}
